/*
 * This source file was generated by the Gradle 'init' task
 */
package com.example.calcsolver;

/*
This application is now configured as a Gradle project for compatibility with Android Studio and future Android development.
To set it up:
1. Create a Gradle project.
2. Replace the `build.gradle` or `build.gradle.kts` files with appropriate configurations for Java Swing development.
3. Later adapt the project for Android by adjusting dependencies and modules.
 */
// Calculator Front-End (Swing UI)
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

public class CalculatorUI {

    private CalculatorBackend backend;
    private boolean solved = false;

    public CalculatorUI(CalculatorBackend backend) {
        this.backend = backend;
        createAndShowGUI();
    }

    private void createAndShowGUI() {
        JFrame frame = new JFrame("Calculator");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 600);
        frame.setLocationRelativeTo(null); // Center the calculator on the screen

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        JTextField display = new JTextField("0");
        display.setFont(new Font("Arial", Font.PLAIN, 24));
        display.setHorizontalAlignment(JTextField.RIGHT);
        panel.add(display, BorderLayout.NORTH);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(11, 4, 5, 5)); // Adjusted to 4 columns.  Note:  Row count matters.

        // Top row buttons
        String[] topRowButtons = {"", "", "←", "C"};
        for (String text : topRowButtons) {
            JButton button = new JButton(text);
            button.setFont(new Font("Arial", Font.PLAIN, 18));
            if (text.equals("C")) {
                button.addActionListener((ActionEvent e) -> {
                    display.setText("0");
                    solved = false;
                });
                buttonPanel.add(button);
            } else if (text.equals("←")) {
                button.addActionListener((ActionEvent e) -> {
                    String currentText = display.getText();
                    if (!solvedText(currentText)) {
                        String editedText = currentText.substring(0, currentText.length() - 1);
                        if (editedText.isEmpty()) {
                            editedText = "0";
                        }
                        display.setText(editedText);
                    }
                });
                buttonPanel.add(button);
            } else {
                buttonPanel.add(new JLabel(""));
            }
        }

        // Add a row for square, square root, cube, and cube root
        String[] powerAndRootButtons = {"^2", "2√", "^3", "3√"};
        for (String text : powerAndRootButtons) {
            JButton button = new JButton(text);
            button.setFont(new Font("Arial", Font.PLAIN, 18));
            button.addActionListener((ActionEvent e) -> {
                String currentText = display.getText();
                StringBuilder sbText = new StringBuilder(text);
                if (sbText.indexOf("√") != -1) {
                    sbText.reverse();
                }
                String scrubbedText = sbText.toString();
                if (solved) {
                    if (text.matches("[0-9]") || text.equals(".")) {
                        display.setText(scrubbedText);
                    } else {
                        display.setText(currentText + scrubbedText);
                    }
                    solved = false;
                } else {
                    if (solvedText(currentText)) {
                        display.setText(scrubbedText);
                    } else {
                        display.setText(currentText + scrubbedText);
                    }
                }
            });
            buttonPanel.add(button);
        }

        // Third row buttons (Exponent, Root, Parentheses)
        String[] thirdRowButtons = {"^", "√", "(", ")"};
        for (String text : thirdRowButtons) {
            JButton button = new JButton(text);
            button.setFont(new Font("Arial", Font.PLAIN, 18));
            button.addActionListener((ActionEvent e) -> {
                String currentText = display.getText();
                if (solved) {
                    if (text.matches("[0-9]") || text.equals(".")) {
                        display.setText(text);
                    } else {
                        display.setText(currentText + text);
                    }
                    solved = false;
                } else {
                    if (solvedText(currentText)) {
                        display.setText(text);
                    } else {
                        display.setText(currentText + text);
                    }
                }
            });
            buttonPanel.add(button);
        }

        // Fourth row buttons (Comparison, Not, and Equals, so user can enter comparisons like "!=" and ">=")
        String[] fourthRowButtons = {"<", ">", "!", "="};
        for (String text : fourthRowButtons) {
            JButton button = new JButton(text);
            button.setFont(new Font("Arial", Font.PLAIN, 18));
            button.addActionListener((ActionEvent e) -> {
                String currentText = display.getText();
                if (solved) {
                    if (text.matches("[0-9]") || text.equals(".")) {
                        display.setText(text);
                    } else {
                        display.setText(currentText + text);
                    }
                    solved = false;
                } else {
                    if (solvedText(currentText)) {
//                        display.setText(text);
                    } else {
                        //If user clicks "=", it concatenates normally if it follows "!", "<" or ">".  Otherwise, it doubly concatenates, for "==".
                        if (text.equals("=")) {
                            if ((currentText.endsWith("<")) || (currentText.endsWith(">")) || (currentText.endsWith("!"))) {
                                display.setText(currentText + text);
                            } else {
                                display.setText(currentText + text + text);
                            }
                        } else {
                            display.setText(currentText + text);
                        }
                    }
                }
            });
            buttonPanel.add(button);
        }

        // Variable buttons (m through v)
        for (char variable = 'm'; variable <= 'v'; variable++) {
            JButton button = new JButton(String.valueOf(variable));
            button.setFont(new Font("Arial", Font.PLAIN, 18));
            button.addActionListener((ActionEvent e) -> {
                String currentText = display.getText();
                if (solved) {
                    display.setText(button.getText());
                    solved = false;
                } else {
                    if (solvedText(currentText)) {
                        display.setText(button.getText());
                    } else {
                        display.setText(currentText + button.getText());
                    }
                }
            });
            buttonPanel.add(button);
        }

        // Add spacers for variable row
        String symbols[] = {"==", ","};
        for (int whichButton = 0; whichButton < 2; whichButton++) {
            JButton button = new JButton(symbols[whichButton]);
            button.setFont(new Font("Arial", Font.PLAIN, 18));
            button.addActionListener((ActionEvent e) -> {
                String currentText = display.getText();
                if (solved) {
//                    display.setText(button.getText());
//                    solved = false;
                } else {
                    if (solvedText(currentText)) {
//                        display.setText(button.getText());
                    } else {
                        display.setText(currentText + button.getText());
                    }
                }
            });
            buttonPanel.add(button);
        }

        // Number and operator rows
        String[][] rows = {
            {"7", "8", "9", "/"},
            {"4", "5", "6", "*"},
            {"1", "2", "3", "-"},
            {"0", ".", "Solve", "+"}
        };

        for (String[] row : rows) {
            for (String text : row) {
                JButton button = new JButton(text);
                button.setFont(new Font("Arial", Font.PLAIN, 18));
                button.addActionListener((ActionEvent e) -> {
                    String currentText = display.getText();
                    if (text.equals("Solve")) {
                        String input = display.getText();
                        if (input.equals("0")) {
                            display.setText("0");
                        } else {
                            String result = backend.solveProblem(input);
                            display.setText(result);
                            solved = true;
                        }
                    } else {
                        if (solved) {
                            if (text.matches("[0-9]") || text.equals(".")) {
                                display.setText(text);
                                solved = false;
                            } else {
//                                display.setText(currentText + text);
                            }
                        } else {
                            if (solvedText(currentText) && text.matches("[0-9]")) {
                                display.setText(text);
                            } else {
                                display.setText(currentText + text);
                            }
                        }
                    }
                });
                buttonPanel.add(button);
            }
        }

        panel.add(buttonPanel, BorderLayout.CENTER);

        frame.add(panel);
        frame.setVisible(true);
    }

    private boolean solvedText(String currentText) {
        boolean result = false;

        if ((currentText.equals("0")) || (currentText.contains("Result")) || (currentText.contains("Solutions"))) {
            result = true;
        }

        return result;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new CalculatorUI(new CalculatorBackend()));
    }
}
